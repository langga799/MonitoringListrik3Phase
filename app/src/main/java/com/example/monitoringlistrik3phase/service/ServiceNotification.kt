package com.example.monitoringlistrik3phase.serviceimport android.app.Serviceimport android.content.Intentimport android.os.IBinderimport android.util.Logimport android.widget.Toastimport com.example.monitoringlistrik3phase.service.model.NotificationDataimport com.google.firebase.database.DataSnapshotimport com.google.firebase.database.DatabaseErrorimport com.google.firebase.database.DatabaseReferenceimport com.google.firebase.database.ValueEventListenerimport com.google.firebase.database.ktx.databaseimport com.google.firebase.firestore.FirebaseFirestoreimport com.google.firebase.firestore.ktx.firestoreimport com.google.firebase.ktx.Firebaseimport kotlinx.coroutines.CoroutineScopeimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.delayimport kotlinx.coroutines.launchimport java.time.LocalDateTimeimport java.time.format.DateTimeFormatterclass ServiceNotification : Service() {    private lateinit var reference : DatabaseReference    private lateinit var fireStore : FirebaseFirestore    private var dateAndTime = ""    private var ampereFasa1 = ""    private var ampereFasa2 = ""    private var ampereFasa3 = ""    private var teganganFasa1 = ""    private var teganganFasa2 = ""    private var teganganFasa3 = ""    private var dayaFasa1 = ""    private var dayaFasa2 = ""    private var dayaFasa3 = ""    override fun onCreate() {        super.onCreate()        val current = LocalDateTime.now()        val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")        val date = current.format(formatter)        val formatTime = DateTimeFormatter.ofPattern("HH:mm")        val time = current.format(formatTime)        dateAndTime = "$date $time"        reference = Firebase.database.reference        fireStore = Firebase.firestore        getDataPersentase()        creatingHistory()    }    private fun getDataPersentase() {        reference.apply {// =========================================== Ampere ==============================================            child("listrik").child("ampere").child("ampere-fasa-1")                .addValueEventListener(object : ValueEventListener {                    override fun onDataChange(snapshot: DataSnapshot) {                       ampereFasa1 = snapshot.value.toString()                    }                    override fun onCancelled(error: DatabaseError) {   }                })            child("listrik").child("ampere").child("ampere-fasa-2")                .addValueEventListener(object : ValueEventListener {                    override fun onDataChange(snapshot: DataSnapshot) {                        ampereFasa2 = snapshot.value.toString()                    }                    override fun onCancelled(error: DatabaseError) {  }                })            child("listrik").child("ampere").child("ampere-fasa-3")                .addValueEventListener(object : ValueEventListener {                    override fun onDataChange(snapshot: DataSnapshot) {                        ampereFasa3 = snapshot.value.toString()                    }                    override fun onCancelled(error: DatabaseError) { }                })// =================================================================================================// =========================================== Daya ================================================            child("listrik").child("daya").child("daya-fasa-1")                .addValueEventListener(object : ValueEventListener {                    override fun onDataChange(snapshot: DataSnapshot) {                        dayaFasa1 = snapshot.value.toString()                    }                    override fun onCancelled(error: DatabaseError) { }                })            child("listrik").child("daya").child("daya-fasa-2")                .addValueEventListener(object : ValueEventListener {                    override fun onDataChange(snapshot: DataSnapshot) {                        dayaFasa2 = snapshot.value.toString()                    }                    override fun onCancelled(error: DatabaseError) {                    }                })            child("listrik").child("daya").child("daya-fasa-3")                .addValueEventListener(object : ValueEventListener {                    override fun onDataChange(snapshot: DataSnapshot) {                        dayaFasa3 = snapshot.value.toString()                    }                    override fun onCancelled(error: DatabaseError) { }                })// =================================================================================================// ========================================= Tegangan ==============================================            child("listrik").child("tegangan").child("tegangan-fasa-1")                .addValueEventListener(object : ValueEventListener {                    override fun onDataChange(snapshot: DataSnapshot) {                        teganganFasa1 = snapshot.value.toString()                    }                    override fun onCancelled(error: DatabaseError) { }                })            child("listrik").child("tegangan").child("tegangan-fasa-2")                .addValueEventListener(object : ValueEventListener {                    override fun onDataChange(snapshot: DataSnapshot) {                        teganganFasa2 = snapshot.value.toString()                    }                    override fun onCancelled(error: DatabaseError) { }                })            child("listrik").child("tegangan").child("tegangan-fasa-3")                .addValueEventListener(object : ValueEventListener {                    override fun onDataChange(snapshot: DataSnapshot) {                        teganganFasa3 = snapshot.value.toString()                    }                    override fun onCancelled(error: DatabaseError) {  }                })// =================================================================================================        }    }    // ===================================== Creating History ==========================================    private fun creatingHistory(){  // FASA 1        reference.child("persentase_ketidakseimbangan").child("fasa-1-R")            .addValueEventListener(object : ValueEventListener {                override fun onDataChange(snapshot: DataSnapshot) {                    val value = snapshot.value.toString().toInt()                    when {                        value >= 75 -> {                        }                        value in 75 downTo 50 -> {                        }                        value < 50 -> {                            Log.d("STATE", "state")                            CoroutineScope(Dispatchers.Default).launch {                                delay(1000)                                sendHistoryFasa1( value.toString())                                warningNotifFasa1(baseContext)                            }                        }                    }                }                override fun onCancelled(error: DatabaseError) {                }            })        reference.child("persentase_ketidakseimbangan").child("fasa-2-S")            .addValueEventListener(object : ValueEventListener {                override fun onDataChange(snapshot: DataSnapshot) {                    val value = snapshot.value.toString().toInt()                    when {                        value <= 75 -> {                        }                        value in 75 downTo 50 -> {                        }                        value < 50 -> {                            sendHistoryFasa2(value.toString())                            warningNotifFasa2()                        }                    }                }                override fun onCancelled(error: DatabaseError) {                }            })        reference.child("persentase_ketidakseimbangan").child("fasa-3-T")            .addValueEventListener(object : ValueEventListener {                override fun onDataChange(snapshot: DataSnapshot) {                    val value = snapshot.value.toString().toInt()                    when {                        value <= 75 -> {                        }                        value in 75 downTo 50 -> {                        }                        value < 50 -> {                            sendHistoryFasa3(value.toString())                            warningNotifFasa3()                        }                    }                }                override fun onCancelled(error: DatabaseError) {                }            })// =================================================================================================    }    fun sendHistoryFasa1(persentase: String) {        Log.d("DATE_TIME", dateAndTime)        Log.d("VALUE", ampereFasa1)        val data = hashMapOf(            "date" to dateAndTime,            "listrik" to "Fasa 1",            "ampere_status" to ampereFasa1,            "tegangan_status" to teganganFasa1,            "daya_status" to dayaFasa1,            "persentase" to persentase        )        fireStore.collection("history").add(data)    }    fun sendHistoryFasa2(persentase: String) {        val data = hashMapOf(            "date" to dateAndTime,            "listrik" to "Fasa 2",            "ampere_status" to ampereFasa2,            "tegangan_status" to teganganFasa2,            "daya_status" to dayaFasa2,            "persentase" to persentase        )        fireStore.collection("history").add(data)    }    fun sendHistoryFasa3(persentase: String) {        val data = hashMapOf(            "date" to dateAndTime,            "listrik" to "Fasa 3",            "ampere_status" to ampereFasa3,            "tegangan_status" to teganganFasa3,            "daya_status" to dayaFasa3,            "persentase" to persentase        )        fireStore.collection("history").add(data)    }//==================================================================================================    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {        Toast.makeText(baseContext, "Run", Toast.LENGTH_SHORT).show()        return START_STICKY    }    override fun onBind(p0: Intent?): IBinder? {        return null    }//    override fun onCreate() {//        super.onCreate()////        Firebase.database.reference.child("persentase_ketidakseimbangan").child("fasa-1-R")//            .addValueEventListener(object : ValueEventListener {//                override fun onDataChange(snapshot: DataSnapshot) {//                    val value = snapshot.value.toString().toInt()//                    when {//                        value >= 75 -> {//                            Toast.makeText(baseContext, "Tes", Toast.LENGTH_SHORT).show()////                        }//                        value in 75 downTo 50 -> {////                        }//                        value < 50 -> {////                            warningNotifFasa1(baseContext)//                        }//                    }//                }////                override fun onCancelled(error: DatabaseError) {////                }//            })////    }}